import{N as J,a as Z,b as q,L as $,c as Q,d as ee,C as te,R as se,M as ne,V as G,S as ie,e as re,f as P,g as oe,D as ae,B as v,P as D,I as ce,h as le,i as k,j as fe,s as ue}from"./index.17579488.js";class K{constructor(){this.pluginCallbacks=[],this.register(function(e){return new ye(e)}),this.register(function(e){return new Me(e)}),this.register(function(e){return new Ae(e)}),this.register(function(e){return new Ne(e)}),this.register(function(e){return new we(e)}),this.register(function(e){return new Ie(e)})}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,s,r,t){const i=new Ee,n=[];for(let o=0,a=this.pluginCallbacks.length;o<a;o++)n.push(this.pluginCallbacks[o](i));i.setPlugins(n),i.write(e,s,t).catch(r)}parseAsync(e,s){const r=this;return new Promise(function(t,i){r.parse(e,t,i,s)})}}const x={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,UNSIGNED_BYTE:5121,UNSIGNED_SHORT:5123,FLOAT:5126,UNSIGNED_INT:5125,ARRAY_BUFFER:34962,ELEMENT_ARRAY_BUFFER:34963,NEAREST:9728,LINEAR:9729,NEAREST_MIPMAP_NEAREST:9984,LINEAR_MIPMAP_NEAREST:9985,NEAREST_MIPMAP_LINEAR:9986,LINEAR_MIPMAP_LINEAR:9987,CLAMP_TO_EDGE:33071,MIRRORED_REPEAT:33648,REPEAT:10497},N={};N[J]=x.NEAREST;N[Z]=x.NEAREST_MIPMAP_NEAREST;N[q]=x.NEAREST_MIPMAP_LINEAR;N[$]=x.LINEAR;N[Q]=x.LINEAR_MIPMAP_NEAREST;N[ee]=x.LINEAR_MIPMAP_LINEAR;N[te]=x.CLAMP_TO_EDGE;N[se]=x.REPEAT;N[ne]=x.MIRRORED_REPEAT;const z={scale:"scale",position:"translation",quaternion:"rotation",morphTargetInfluences:"weights"},V=12,he=1179937895,pe=2,H=8,de=1313821514,ge=5130562;function U(c,e){return c.length===e.length&&c.every(function(s,r){return s===e[r]})}function xe(c){return new TextEncoder().encode(c).buffer}function me(c){return U(c.elements,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}function Te(c,e,s){const r={min:new Array(c.itemSize).fill(Number.POSITIVE_INFINITY),max:new Array(c.itemSize).fill(Number.NEGATIVE_INFINITY)};for(let t=e;t<e+s;t++)for(let i=0;i<c.itemSize;i++){let n;c.itemSize>4?n=c.array[t*c.itemSize+i]:(i===0?n=c.getX(t):i===1?n=c.getY(t):i===2?n=c.getZ(t):i===3&&(n=c.getW(t)),c.normalized===!0&&(n=P.normalize(n,c.array))),r.min[i]=Math.min(r.min[i],n),r.max[i]=Math.max(r.max[i],n)}return r}function W(c){return Math.ceil(c/4)*4}function C(c,e=0){const s=W(c.byteLength);if(s!==c.byteLength){const r=new Uint8Array(s);if(r.set(new Uint8Array(c)),e!==0)for(let t=c.byteLength;t<s;t++)r[t]=e;return r.buffer}return c}function j(){return typeof document=="undefined"&&typeof OffscreenCanvas!="undefined"?new OffscreenCanvas(1,1):document.createElement("canvas")}function Y(c,e){if(c.toBlob!==void 0)return new Promise(r=>c.toBlob(r,e));let s;return e==="image/jpeg"?s=.92:e==="image/webp"&&(s=.8),c.convertToBlob({type:e,quality:s})}class Ee{constructor(){this.plugins=[],this.options={},this.pending=[],this.buffers=[],this.byteOffset=0,this.buffers=[],this.nodeMap=new Map,this.skins=[],this.extensionsUsed={},this.uids=new Map,this.uid=0,this.json={asset:{version:"2.0",generator:"THREE.GLTFExporter"}},this.cache={meshes:new Map,attributes:new Map,attributesNormalized:new Map,materials:new Map,textures:new Map,images:new Map}}setPlugins(e){this.plugins=e}async write(e,s,r={}){this.options=Object.assign({binary:!1,trs:!1,onlyVisible:!0,maxTextureSize:1/0,animations:[],includeCustomExtensions:!1},r),this.options.animations.length>0&&(this.options.trs=!0),this.processInput(e),await Promise.all(this.pending);const t=this,i=t.buffers,n=t.json;r=t.options;const o=t.extensionsUsed,a=new Blob(i,{type:"application/octet-stream"}),l=Object.keys(o);if(l.length>0&&(n.extensionsUsed=l),n.buffers&&n.buffers.length>0&&(n.buffers[0].byteLength=a.size),r.binary===!0){const p=new FileReader;p.readAsArrayBuffer(a),p.onloadend=function(){const f=C(p.result),m=new DataView(new ArrayBuffer(H));m.setUint32(0,f.byteLength,!0),m.setUint32(4,ge,!0);const u=C(xe(JSON.stringify(n)),32),d=new DataView(new ArrayBuffer(H));d.setUint32(0,u.byteLength,!0),d.setUint32(4,de,!0);const h=new ArrayBuffer(V),E=new DataView(h);E.setUint32(0,he,!0),E.setUint32(4,pe,!0);const T=V+d.byteLength+u.byteLength+m.byteLength+f.byteLength;E.setUint32(8,T,!0);const F=new Blob([h,d,u,m,f],{type:"application/octet-stream"}),g=new FileReader;g.readAsArrayBuffer(F),g.onloadend=function(){s(g.result)}}}else if(n.buffers&&n.buffers.length>0){const p=new FileReader;p.readAsDataURL(a),p.onloadend=function(){const f=p.result;n.buffers[0].uri=f,s(n)}}else s(n)}serializeUserData(e,s){if(Object.keys(e.userData).length===0)return;const r=this.options,t=this.extensionsUsed;try{const i=JSON.parse(JSON.stringify(e.userData));if(r.includeCustomExtensions&&i.gltfExtensions){s.extensions===void 0&&(s.extensions={});for(const n in i.gltfExtensions)s.extensions[n]=i.gltfExtensions[n],t[n]=!0;delete i.gltfExtensions}Object.keys(i).length>0&&(s.extras=i)}catch(i){console.warn("THREE.GLTFExporter: userData of '"+e.name+"' won't be serialized because of JSON.stringify error - "+i.message)}}getUID(e,s=!1){if(this.uids.has(e)===!1){const t=new Map;t.set(!0,this.uid++),t.set(!1,this.uid++),this.uids.set(e,t)}return this.uids.get(e).get(s)}isNormalizedNormalAttribute(e){if(this.cache.attributesNormalized.has(e))return!1;const r=new G;for(let t=0,i=e.count;t<i;t++)if(Math.abs(r.fromBufferAttribute(e,t).length()-1)>5e-4)return!1;return!0}createNormalizedNormalAttribute(e){const s=this.cache;if(s.attributesNormalized.has(e))return s.attributesNormalized.get(e);const r=e.clone(),t=new G;for(let i=0,n=r.count;i<n;i++)t.fromBufferAttribute(r,i),t.x===0&&t.y===0&&t.z===0?t.setX(1):t.normalize(),r.setXYZ(i,t.x,t.y,t.z);return s.attributesNormalized.set(e,r),r}applyTextureTransform(e,s){let r=!1;const t={};(s.offset.x!==0||s.offset.y!==0)&&(t.offset=s.offset.toArray(),r=!0),s.rotation!==0&&(t.rotation=s.rotation,r=!0),(s.repeat.x!==1||s.repeat.y!==1)&&(t.scale=s.repeat.toArray(),r=!0),r&&(e.extensions=e.extensions||{},e.extensions.KHR_texture_transform=t,this.extensionsUsed.KHR_texture_transform=!0)}buildMetalRoughTexture(e,s){if(e===s)return e;function r(u){return u.encoding===ue?function(h){return h<.04045?h*.0773993808:Math.pow(h*.9478672986+.0521327014,2.4)}:function(h){return h}}console.warn("THREE.GLTFExporter: Merged metalnessMap and roughnessMap textures.");const t=e==null?void 0:e.image,i=s==null?void 0:s.image,n=Math.max((t==null?void 0:t.width)||0,(i==null?void 0:i.width)||0),o=Math.max((t==null?void 0:t.height)||0,(i==null?void 0:i.height)||0),a=j();a.width=n,a.height=o;const l=a.getContext("2d");l.fillStyle="#00ffff",l.fillRect(0,0,n,o);const p=l.getImageData(0,0,n,o);if(t){l.drawImage(t,0,0,n,o);const u=r(e),d=l.getImageData(0,0,n,o).data;for(let h=2;h<d.length;h+=4)p.data[h]=u(d[h]/256)*256}if(i){l.drawImage(i,0,0,n,o);const u=r(s),d=l.getImageData(0,0,n,o).data;for(let h=1;h<d.length;h+=4)p.data[h]=u(d[h]/256)*256}l.putImageData(p,0,0);const m=(e||s).clone();return m.source=new ie(a),m.encoding=re,m}processBuffer(e){const s=this.json,r=this.buffers;return s.buffers||(s.buffers=[{byteLength:0}]),r.push(e),0}processBufferView(e,s,r,t,i){const n=this.json;n.bufferViews||(n.bufferViews=[]);let o;s===x.UNSIGNED_BYTE?o=1:s===x.UNSIGNED_SHORT?o=2:o=4;const a=W(t*e.itemSize*o),l=new DataView(new ArrayBuffer(a));let p=0;for(let u=r;u<r+t;u++)for(let d=0;d<e.itemSize;d++){let h;e.itemSize>4?h=e.array[u*e.itemSize+d]:(d===0?h=e.getX(u):d===1?h=e.getY(u):d===2?h=e.getZ(u):d===3&&(h=e.getW(u)),e.normalized===!0&&(h=P.normalize(h,e.array))),s===x.FLOAT?l.setFloat32(p,h,!0):s===x.UNSIGNED_INT?l.setUint32(p,h,!0):s===x.UNSIGNED_SHORT?l.setUint16(p,h,!0):s===x.UNSIGNED_BYTE&&l.setUint8(p,h),p+=o}const f={buffer:this.processBuffer(l.buffer),byteOffset:this.byteOffset,byteLength:a};return i!==void 0&&(f.target=i),i===x.ARRAY_BUFFER&&(f.byteStride=e.itemSize*o),this.byteOffset+=a,n.bufferViews.push(f),{id:n.bufferViews.length-1,byteLength:0}}processBufferViewImage(e){const s=this,r=s.json;return r.bufferViews||(r.bufferViews=[]),new Promise(function(t){const i=new FileReader;i.readAsArrayBuffer(e),i.onloadend=function(){const n=C(i.result),o={buffer:s.processBuffer(n),byteOffset:s.byteOffset,byteLength:n.byteLength};s.byteOffset+=n.byteLength,t(r.bufferViews.push(o)-1)}})}processAccessor(e,s,r,t){const i=this.json,n={1:"SCALAR",2:"VEC2",3:"VEC3",4:"VEC4",16:"MAT4"};let o;if(e.array.constructor===Float32Array)o=x.FLOAT;else if(e.array.constructor===Uint32Array)o=x.UNSIGNED_INT;else if(e.array.constructor===Uint16Array)o=x.UNSIGNED_SHORT;else if(e.array.constructor===Uint8Array)o=x.UNSIGNED_BYTE;else throw new Error("THREE.GLTFExporter: Unsupported bufferAttribute component type.");if(r===void 0&&(r=0),t===void 0&&(t=e.count),t===0)return null;const a=Te(e,r,t);let l;s!==void 0&&(l=e===s.index?x.ELEMENT_ARRAY_BUFFER:x.ARRAY_BUFFER);const p=this.processBufferView(e,o,r,t,l),f={bufferView:p.id,byteOffset:p.byteOffset,componentType:o,count:t,max:a.max,min:a.min,type:n[e.itemSize]};return e.normalized===!0&&(f.normalized=!0),i.accessors||(i.accessors=[]),i.accessors.push(f)-1}processImage(e,s,r,t="image/png"){if(e!==null){const i=this,n=i.cache,o=i.json,a=i.options,l=i.pending;n.images.has(e)||n.images.set(e,{});const p=n.images.get(e),f=t+":flipY/"+r.toString();if(p[f]!==void 0)return p[f];o.images||(o.images=[]);const m={mimeType:t},u=j();u.width=Math.min(e.width,a.maxTextureSize),u.height=Math.min(e.height,a.maxTextureSize);const d=u.getContext("2d");if(r===!0&&(d.translate(0,u.height),d.scale(1,-1)),e.data!==void 0){s!==oe&&console.error("GLTFExporter: Only RGBAFormat is supported."),(e.width>a.maxTextureSize||e.height>a.maxTextureSize)&&console.warn("GLTFExporter: Image size is bigger than maxTextureSize",e);const E=new Uint8ClampedArray(e.height*e.width*4);for(let T=0;T<E.length;T+=4)E[T+0]=e.data[T+0],E[T+1]=e.data[T+1],E[T+2]=e.data[T+2],E[T+3]=e.data[T+3];d.putImageData(new ImageData(E,e.width,e.height),0,0)}else d.drawImage(e,0,0,u.width,u.height);a.binary===!0?l.push(Y(u,t).then(E=>i.processBufferViewImage(E)).then(E=>{m.bufferView=E})):u.toDataURL!==void 0?m.uri=u.toDataURL(t):l.push(Y(u,t).then(E=>new FileReader().readAsDataURL(E)).then(E=>{m.uri=E}));const h=o.images.push(m)-1;return p[f]=h,h}else throw new Error("THREE.GLTFExporter: No valid image data found. Unable to process texture.")}processSampler(e){const s=this.json;s.samplers||(s.samplers=[]);const r={magFilter:N[e.magFilter],minFilter:N[e.minFilter],wrapS:N[e.wrapS],wrapT:N[e.wrapT]};return s.samplers.push(r)-1}processTexture(e){const s=this.cache,r=this.json;if(s.textures.has(e))return s.textures.get(e);r.textures||(r.textures=[]);let t=e.userData.mimeType;t==="image/webp"&&(t="image/png");const i={sampler:this.processSampler(e),source:this.processImage(e.image,e.format,e.flipY,t)};e.name&&(i.name=e.name),this._invokeAll(function(o){o.writeTexture&&o.writeTexture(e,i)});const n=r.textures.push(i)-1;return s.textures.set(e,n),n}processMaterial(e){const s=this.cache,r=this.json;if(s.materials.has(e))return s.materials.get(e);if(e.isShaderMaterial)return console.warn("GLTFExporter: THREE.ShaderMaterial not supported."),null;r.materials||(r.materials=[]);const t={pbrMetallicRoughness:{}};e.isMeshStandardMaterial!==!0&&e.isMeshBasicMaterial!==!0&&console.warn("GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.");const i=e.color.toArray().concat([e.opacity]);if(U(i,[1,1,1,1])||(t.pbrMetallicRoughness.baseColorFactor=i),e.isMeshStandardMaterial?(t.pbrMetallicRoughness.metallicFactor=e.metalness,t.pbrMetallicRoughness.roughnessFactor=e.roughness):(t.pbrMetallicRoughness.metallicFactor=.5,t.pbrMetallicRoughness.roughnessFactor=.5),e.metalnessMap||e.roughnessMap){const o=this.buildMetalRoughTexture(e.metalnessMap,e.roughnessMap),a={index:this.processTexture(o)};this.applyTextureTransform(a,o),t.pbrMetallicRoughness.metallicRoughnessTexture=a}if(e.map){const o={index:this.processTexture(e.map)};this.applyTextureTransform(o,e.map),t.pbrMetallicRoughness.baseColorTexture=o}if(e.emissive){const o=e.emissive.clone().multiplyScalar(e.emissiveIntensity),a=Math.max(o.r,o.g,o.b);if(a>1&&(o.multiplyScalar(1/a),console.warn("THREE.GLTFExporter: Some emissive components exceed 1; emissive has been limited")),a>0&&(t.emissiveFactor=o.toArray()),e.emissiveMap){const l={index:this.processTexture(e.emissiveMap)};this.applyTextureTransform(l,e.emissiveMap),t.emissiveTexture=l}}if(e.normalMap){const o={index:this.processTexture(e.normalMap)};e.normalScale&&e.normalScale.x!==1&&(o.scale=e.normalScale.x),this.applyTextureTransform(o,e.normalMap),t.normalTexture=o}if(e.aoMap){const o={index:this.processTexture(e.aoMap),texCoord:1};e.aoMapIntensity!==1&&(o.strength=e.aoMapIntensity),this.applyTextureTransform(o,e.aoMap),t.occlusionTexture=o}e.transparent?t.alphaMode="BLEND":e.alphaTest>0&&(t.alphaMode="MASK",t.alphaCutoff=e.alphaTest),e.side===ae&&(t.doubleSided=!0),e.name!==""&&(t.name=e.name),this.serializeUserData(e,t),this._invokeAll(function(o){o&&o.writeMaterial&&o.writeMaterial(e,t)});const n=r.materials.push(t)-1;return s.materials.set(e,n),n}processMesh(e){const s=this.cache,r=this.json,t=[e.geometry.uuid];if(Array.isArray(e.material))for(let g=0,y=e.material.length;g<y;g++)t.push(e.material[g].uuid);else t.push(e.material.uuid);const i=t.join(":");if(s.meshes.has(i))return s.meshes.get(i);const n=e.geometry;let o;e.isLineSegments?o=x.LINES:e.isLineLoop?o=x.LINE_LOOP:e.isLine?o=x.LINE_STRIP:e.isPoints?o=x.POINTS:o=e.material.wireframe?x.LINES:x.TRIANGLES;const a={},l={},p=[],f=[],m={uv:"TEXCOORD_0",uv2:"TEXCOORD_1",color:"COLOR_0",skinWeight:"WEIGHTS_0",skinIndex:"JOINTS_0"},u=n.getAttribute("normal");u!==void 0&&!this.isNormalizedNormalAttribute(u)&&(console.warn("THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one."),n.setAttribute("normal",this.createNormalizedNormalAttribute(u)));let d=null;for(let g in n.attributes){if(g.slice(0,5)==="morph")continue;const y=n.attributes[g];if(g=m[g]||g.toUpperCase(),/^(POSITION|NORMAL|TANGENT|TEXCOORD_\d+|COLOR_\d+|JOINTS_\d+|WEIGHTS_\d+)$/.test(g)||(g="_"+g),s.attributes.has(this.getUID(y))){l[g]=s.attributes.get(this.getUID(y));continue}d=null;const M=y.array;g==="JOINTS_0"&&!(M instanceof Uint16Array)&&!(M instanceof Uint8Array)&&(console.warn('GLTFExporter: Attribute "skinIndex" converted to type UNSIGNED_SHORT.'),d=new v(new Uint16Array(M),y.itemSize,y.normalized));const A=this.processAccessor(d||y,n);A!==null&&(l[g]=A,s.attributes.set(this.getUID(y),A))}if(u!==void 0&&n.setAttribute("normal",u),Object.keys(l).length===0)return null;if(e.morphTargetInfluences!==void 0&&e.morphTargetInfluences.length>0){const g=[],y=[],I={};if(e.morphTargetDictionary!==void 0)for(const M in e.morphTargetDictionary)I[e.morphTargetDictionary[M]]=M;for(let M=0;M<e.morphTargetInfluences.length;++M){const A={};let B=!1;for(const L in n.morphAttributes){if(L!=="position"&&L!=="normal"){B||(console.warn("GLTFExporter: Only POSITION and NORMAL morph are supported."),B=!0);continue}const R=n.morphAttributes[L][M],O=L.toUpperCase(),S=n.attributes[L];if(s.attributes.has(this.getUID(R,!0))){A[O]=s.attributes.get(this.getUID(R,!0));continue}const _=R.clone();if(!n.morphTargetsRelative)for(let w=0,X=R.count;w<X;w++)for(let b=0;b<R.itemSize;b++)b===0&&_.setX(w,R.getX(w)-S.getX(w)),b===1&&_.setY(w,R.getY(w)-S.getY(w)),b===2&&_.setZ(w,R.getZ(w)-S.getZ(w)),b===3&&_.setW(w,R.getW(w)-S.getW(w));A[O]=this.processAccessor(_,n),s.attributes.set(this.getUID(S,!0),A[O])}f.push(A),g.push(e.morphTargetInfluences[M]),e.morphTargetDictionary!==void 0&&y.push(I[M])}a.weights=g,y.length>0&&(a.extras={},a.extras.targetNames=y)}const h=Array.isArray(e.material);if(h&&n.groups.length===0)return null;const E=h?e.material:[e.material],T=h?n.groups:[{materialIndex:0,start:void 0,count:void 0}];for(let g=0,y=T.length;g<y;g++){const I={mode:o,attributes:l};if(this.serializeUserData(n,I),f.length>0&&(I.targets=f),n.index!==null){let A=this.getUID(n.index);(T[g].start!==void 0||T[g].count!==void 0)&&(A+=":"+T[g].start+":"+T[g].count),s.attributes.has(A)?I.indices=s.attributes.get(A):(I.indices=this.processAccessor(n.index,n,T[g].start,T[g].count),s.attributes.set(A,I.indices)),I.indices===null&&delete I.indices}const M=this.processMaterial(E[T[g].materialIndex]);M!==null&&(I.material=M),p.push(I)}a.primitives=p,r.meshes||(r.meshes=[]),this._invokeAll(function(g){g.writeMesh&&g.writeMesh(e,a)});const F=r.meshes.push(a)-1;return s.meshes.set(i,F),F}processCamera(e){const s=this.json;s.cameras||(s.cameras=[]);const r=e.isOrthographicCamera,t={type:r?"orthographic":"perspective"};return r?t.orthographic={xmag:e.right*2,ymag:e.top*2,zfar:e.far<=0?.001:e.far,znear:e.near<0?0:e.near}:t.perspective={aspectRatio:e.aspect,yfov:P.degToRad(e.fov),zfar:e.far<=0?.001:e.far,znear:e.near<0?0:e.near},e.name!==""&&(t.name=e.type),s.cameras.push(t)-1}processAnimation(e,s){const r=this.json,t=this.nodeMap;r.animations||(r.animations=[]),e=K.Utils.mergeMorphTargetTracks(e.clone(),s);const i=e.tracks,n=[],o=[];for(let a=0;a<i.length;++a){const l=i[a],p=D.parseTrackName(l.name);let f=D.findNode(s,p.nodeName);const m=z[p.propertyName];if(p.objectName==="bones"&&(f.isSkinnedMesh===!0?f=f.skeleton.getBoneByName(p.objectIndex):f=void 0),!f||!m)return console.warn('THREE.GLTFExporter: Could not export animation track "%s".',l.name),null;const u=1;let d=l.values.length/l.times.length;m===z.morphTargetInfluences&&(d/=f.morphTargetInfluences.length);let h;l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline===!0?(h="CUBICSPLINE",d/=3):l.getInterpolation()===ce?h="STEP":h="LINEAR",o.push({input:this.processAccessor(new v(l.times,u)),output:this.processAccessor(new v(l.values,d)),interpolation:h}),n.push({sampler:o.length-1,target:{node:t.get(f),path:m}})}return r.animations.push({name:e.name||"clip_"+r.animations.length,samplers:o,channels:n}),r.animations.length-1}processSkin(e){const s=this.json,r=this.nodeMap,t=s.nodes[r.get(e)],i=e.skeleton;if(i===void 0)return null;const n=e.skeleton.bones[0];if(n===void 0)return null;const o=[],a=new Float32Array(i.bones.length*16),l=new le;for(let f=0;f<i.bones.length;++f)o.push(r.get(i.bones[f])),l.copy(i.boneInverses[f]),l.multiply(e.bindMatrix).toArray(a,f*16);return s.skins===void 0&&(s.skins=[]),s.skins.push({inverseBindMatrices:this.processAccessor(new v(a,16)),joints:o,skeleton:r.get(n)}),t.skin=s.skins.length-1}processNode(e){const s=this.json,r=this.options,t=this.nodeMap;s.nodes||(s.nodes=[]);const i={};if(r.trs){const o=e.quaternion.toArray(),a=e.position.toArray(),l=e.scale.toArray();U(o,[0,0,0,1])||(i.rotation=o),U(a,[0,0,0])||(i.translation=a),U(l,[1,1,1])||(i.scale=l)}else e.matrixAutoUpdate&&e.updateMatrix(),me(e.matrix)===!1&&(i.matrix=e.matrix.elements);if(e.name!==""&&(i.name=String(e.name)),this.serializeUserData(e,i),e.isMesh||e.isLine||e.isPoints){const o=this.processMesh(e);o!==null&&(i.mesh=o)}else e.isCamera&&(i.camera=this.processCamera(e));if(e.isSkinnedMesh&&this.skins.push(e),e.children.length>0){const o=[];for(let a=0,l=e.children.length;a<l;a++){const p=e.children[a];if(p.visible||r.onlyVisible===!1){const f=this.processNode(p);f!==null&&o.push(f)}}o.length>0&&(i.children=o)}this._invokeAll(function(o){o.writeNode&&o.writeNode(e,i)});const n=s.nodes.push(i)-1;return t.set(e,n),n}processScene(e){const s=this.json,r=this.options;s.scenes||(s.scenes=[],s.scene=0);const t={};e.name!==""&&(t.name=e.name),s.scenes.push(t);const i=[];for(let n=0,o=e.children.length;n<o;n++){const a=e.children[n];if(a.visible||r.onlyVisible===!1){const l=this.processNode(a);l!==null&&i.push(l)}}i.length>0&&(t.nodes=i),this.serializeUserData(e,t)}processObjects(e){const s=new k;s.name="AuxScene";for(let r=0;r<e.length;r++)s.children.push(e[r]);this.processScene(s)}processInput(e){const s=this.options;e=e instanceof Array?e:[e],this._invokeAll(function(t){t.beforeParse&&t.beforeParse(e)});const r=[];for(let t=0;t<e.length;t++)e[t]instanceof k?this.processScene(e[t]):r.push(e[t]);r.length>0&&this.processObjects(r);for(let t=0;t<this.skins.length;++t)this.processSkin(this.skins[t]);for(let t=0;t<s.animations.length;++t)this.processAnimation(s.animations[t],e[0]);this._invokeAll(function(t){t.afterParse&&t.afterParse(e)})}_invokeAll(e){for(let s=0,r=this.plugins.length;s<r;s++)e(this.plugins[s])}}class ye{constructor(e){this.writer=e,this.name="KHR_lights_punctual"}writeNode(e,s){if(!e.isLight)return;if(!e.isDirectionalLight&&!e.isPointLight&&!e.isSpotLight){console.warn("THREE.GLTFExporter: Only directional, point, and spot lights are supported.",e);return}const r=this.writer,t=r.json,i=r.extensionsUsed,n={};e.name&&(n.name=e.name),n.color=e.color.toArray(),n.intensity=e.intensity,e.isDirectionalLight?n.type="directional":e.isPointLight?(n.type="point",e.distance>0&&(n.range=e.distance)):e.isSpotLight&&(n.type="spot",e.distance>0&&(n.range=e.distance),n.spot={},n.spot.innerConeAngle=(e.penumbra-1)*e.angle*-1,n.spot.outerConeAngle=e.angle),e.decay!==void 0&&e.decay!==2&&console.warn("THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2."),e.target&&(e.target.parent!==e||e.target.position.x!==0||e.target.position.y!==0||e.target.position.z!==-1)&&console.warn("THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1."),i[this.name]||(t.extensions=t.extensions||{},t.extensions[this.name]={lights:[]},i[this.name]=!0);const o=t.extensions[this.name].lights;o.push(n),s.extensions=s.extensions||{},s.extensions[this.name]={light:o.length-1}}}class Me{constructor(e){this.writer=e,this.name="KHR_materials_unlit"}writeMaterial(e,s){if(!e.isMeshBasicMaterial)return;const t=this.writer.extensionsUsed;s.extensions=s.extensions||{},s.extensions[this.name]={},t[this.name]=!0,s.pbrMetallicRoughness.metallicFactor=0,s.pbrMetallicRoughness.roughnessFactor=.9}}class we{constructor(e){this.writer=e,this.name="KHR_materials_clearcoat"}writeMaterial(e,s){if(!e.isMeshPhysicalMaterial)return;const r=this.writer,t=r.extensionsUsed,i={};if(i.clearcoatFactor=e.clearcoat,e.clearcoatMap){const n={index:r.processTexture(e.clearcoatMap)};r.applyTextureTransform(n,e.clearcoatMap),i.clearcoatTexture=n}if(i.clearcoatRoughnessFactor=e.clearcoatRoughness,e.clearcoatRoughnessMap){const n={index:r.processTexture(e.clearcoatRoughnessMap)};r.applyTextureTransform(n,e.clearcoatRoughnessMap),i.clearcoatRoughnessTexture=n}if(e.clearcoatNormalMap){const n={index:r.processTexture(e.clearcoatNormalMap)};r.applyTextureTransform(n,e.clearcoatNormalMap),i.clearcoatNormalTexture=n}s.extensions=s.extensions||{},s.extensions[this.name]=i,t[this.name]=!0}}class Ie{constructor(e){this.writer=e,this.name="KHR_materials_iridescence"}writeMaterial(e,s){if(!e.isMeshPhysicalMaterial)return;const r=this.writer,t=r.extensionsUsed,i={};if(i.iridescenceFactor=e.iridescence,e.iridescenceMap){const n={index:r.processTexture(e.iridescenceMap)};r.applyTextureTransform(n,e.iridescenceMap),i.iridescenceTexture=n}if(i.iridescenceIor=e.iridescenceIOR,e.iridescenceThicknessRange?(i.iridescenceThicknessMinimum=e.iridescenceThicknessRange[0],i.iridescenceThicknessMaximum=e.iridescenceThicknessRange[1]):(i.iridescenceThicknessMinimum=1,i.iridescenceThicknessMaximum=1),e.iridescenceThicknessMap){const n={index:r.processTexture(e.iridescenceThicknessMap)};r.applyTextureTransform(n,e.iridescenceThicknessMap),i.iridescenceThicknessTexture=n}s.extensions=s.extensions||{},s.extensions[this.name]=i,t[this.name]=!0}}class Ae{constructor(e){this.writer=e,this.name="KHR_materials_transmission"}writeMaterial(e,s){if(!e.isMeshPhysicalMaterial||e.transmission===0)return;const r=this.writer,t=r.extensionsUsed,i={};if(i.transmissionFactor=e.transmission,e.transmissionMap){const n={index:r.processTexture(e.transmissionMap)};r.applyTextureTransform(n,e.transmissionMap),i.transmissionTexture=n}s.extensions=s.extensions||{},s.extensions[this.name]=i,t[this.name]=!0}}class Ne{constructor(e){this.writer=e,this.name="KHR_materials_volume"}writeMaterial(e,s){if(!e.isMeshPhysicalMaterial||e.transmission===0)return;const r=this.writer,t=r.extensionsUsed,i={};if(i.thicknessFactor=e.thickness,e.thicknessMap){const n={index:r.processTexture(e.thicknessMap)};r.applyTextureTransform(n,e.thicknessMap),i.thicknessTexture=n}i.attenuationDistance=e.attenuationDistance,i.attenuationColor=e.attenuationColor.toArray(),s.extensions=s.extensions||{},s.extensions[this.name]=i,t[this.name]=!0}}K.Utils={insertKeyframe:function(c,e){const r=c.getValueSize(),t=new c.TimeBufferType(c.times.length+1),i=new c.ValueBufferType(c.values.length+r),n=c.createInterpolant(new c.ValueBufferType(r));let o;if(c.times.length===0){t[0]=e;for(let a=0;a<r;a++)i[a]=0;o=0}else if(e<c.times[0]){if(Math.abs(c.times[0]-e)<.001)return 0;t[0]=e,t.set(c.times,1),i.set(n.evaluate(e),0),i.set(c.values,r),o=0}else if(e>c.times[c.times.length-1]){if(Math.abs(c.times[c.times.length-1]-e)<.001)return c.times.length-1;t[t.length-1]=e,t.set(c.times,0),i.set(c.values,0),i.set(n.evaluate(e),c.values.length),o=t.length-1}else for(let a=0;a<c.times.length;a++){if(Math.abs(c.times[a]-e)<.001)return a;if(c.times[a]<e&&c.times[a+1]>e){t.set(c.times.slice(0,a+1),0),t[a+1]=e,t.set(c.times.slice(a+1),a+2),i.set(c.values.slice(0,(a+1)*r),0),i.set(n.evaluate(e),(a+1)*r),i.set(c.values.slice((a+1)*r),(a+2)*r),o=a+1;break}}return c.times=t,c.values=i,o},mergeMorphTargetTracks:function(c,e){const s=[],r={},t=c.tracks;for(let i=0;i<t.length;++i){let n=t[i];const o=D.parseTrackName(n.name),a=D.findNode(e,o.nodeName);if(o.propertyName!=="morphTargetInfluences"||o.propertyIndex===void 0){s.push(n);continue}if(n.createInterpolant!==n.InterpolantFactoryMethodDiscrete&&n.createInterpolant!==n.InterpolantFactoryMethodLinear){if(n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline)throw new Error("THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.");console.warn("THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead."),n=n.clone(),n.setInterpolation(fe)}const l=a.morphTargetInfluences.length,p=a.morphTargetDictionary[o.propertyIndex];if(p===void 0)throw new Error("THREE.GLTFExporter: Morph target name not found: "+o.propertyIndex);let f;if(r[a.uuid]===void 0){f=n.clone();const u=new f.ValueBufferType(l*f.times.length);for(let d=0;d<f.times.length;d++)u[d*l+p]=f.values[d];f.name=(o.nodeName||"")+".morphTargetInfluences",f.values=u,r[a.uuid]=f,s.push(f);continue}const m=n.createInterpolant(new n.ValueBufferType(1));f=r[a.uuid];for(let u=0;u<f.times.length;u++)f.values[u*l+p]=m.evaluate(f.times[u]);for(let u=0;u<n.times.length;u++){const d=this.insertKeyframe(f,n.times[u]);f.values[d*l+p]=n.values[u]}}return c.tracks=s,c}};export{K as GLTFExporter};
